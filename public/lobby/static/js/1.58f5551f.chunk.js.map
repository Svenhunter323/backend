{"version":3,"file":"static/js/1.58f5551f.chunk.js","mappings":"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","sources":["../node_modules/@walletconnect/modal/src/client.ts","../node_modules/@walletconnect/modal-core/src/controllers/RouterCtrl.ts","../node_modules/@walletconnect/modal-core/src/utils/CoreUtil.ts","../node_modules/@walletconnect/modal-core/src/controllers/EventsCtrl.ts","../node_modules/@walletconnect/modal-core/src/controllers/OptionsCtrl.ts","../node_modules/@walletconnect/modal-core/src/controllers/ConfigCtrl.ts","../node_modules/@walletconnect/modal-core/src/utils/ExplorerUtil.ts","../node_modules/@walletconnect/modal-core/src/controllers/ExplorerCtrl.ts","../node_modules/@walletconnect/modal-core/src/controllers/ModalCtrl.ts","../node_modules/@walletconnect/modal-core/src/controllers/ThemeCtrl.ts","../node_modules/@walletconnect/modal-core/src/controllers/ToastCtrl.ts"],"sourcesContent":["import type { ConfigCtrlState, ThemeCtrlState } from '@walletconnect/modal-core'\nimport { ConfigCtrl, ModalCtrl, OptionsCtrl, ThemeCtrl } from '@walletconnect/modal-core'\n\n/**\n * Types\n */\nexport type WalletConnectModalConfig = ConfigCtrlState & ThemeCtrlState\n\n/**\n * Client\n */\nexport class WalletConnectModal {\n  public constructor(config: WalletConnectModalConfig) {\n    ThemeCtrl.setThemeConfig(config)\n    ConfigCtrl.setConfig(config)\n    this.initUi()\n  }\n\n  private async initUi() {\n    if (typeof window !== 'undefined') {\n      await import('@walletconnect/modal-ui')\n      const modal = document.createElement('wcm-modal')\n      document.body.insertAdjacentElement('beforeend', modal)\n      OptionsCtrl.setIsUiLoaded(true)\n    }\n  }\n\n  public openModal = ModalCtrl.open\n\n  public closeModal = ModalCtrl.close\n\n  public subscribeModal = ModalCtrl.subscribe\n\n  public setTheme = ThemeCtrl.setThemeConfig\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { RouterCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<RouterCtrlState>({\n  history: ['ConnectWallet'],\n  view: 'ConnectWallet',\n  data: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const RouterCtrl = {\n  state,\n\n  subscribe(callback: (newState: RouterCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  push(view: RouterCtrlState['view'], data?: RouterCtrlState['data']) {\n    if (view !== state.view) {\n      state.view = view\n      if (data) {\n        state.data = data\n      }\n      state.history.push(view)\n    }\n  },\n\n  reset(view: RouterCtrlState['view']) {\n    state.view = view\n    state.history = [view]\n  },\n\n  replace(view: RouterCtrlState['view']) {\n    if (state.history.length > 1) {\n      state.history[state.history.length - 1] = view\n      state.view = view\n    }\n  },\n\n  goBack() {\n    if (state.history.length > 1) {\n      state.history.pop()\n      const [last] = state.history.slice(-1)\n      state.view = last\n    }\n  },\n\n  setData(data: RouterCtrlState['data']) {\n    state.data = data\n  }\n}\n","import { RouterCtrl } from '../controllers/RouterCtrl'\n\nexport const CoreUtil = {\n  WALLETCONNECT_DEEPLINK_CHOICE: 'WALLETCONNECT_DEEPLINK_CHOICE',\n\n  WCM_VERSION: 'WCM_VERSION',\n\n  RECOMMENDED_WALLET_AMOUNT: 9,\n\n  isMobile() {\n    if (typeof window !== 'undefined') {\n      return Boolean(\n        window.matchMedia('(pointer:coarse)').matches ||\n          /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)\n      )\n    }\n\n    return false\n  },\n\n  isAndroid() {\n    return CoreUtil.isMobile() && navigator.userAgent.toLowerCase().includes('android')\n  },\n\n  isIos() {\n    const ua = navigator.userAgent.toLowerCase()\n\n    return CoreUtil.isMobile() && (ua.includes('iphone') || ua.includes('ipad'))\n  },\n\n  isHttpUrl(url: string) {\n    return url.startsWith('http://') || url.startsWith('https://')\n  },\n\n  isArray<T>(data?: T | T[]): data is T[] {\n    return Array.isArray(data) && data.length > 0\n  },\n\n  formatNativeUrl(appUrl: string, wcUri: string, name: string): string {\n    if (CoreUtil.isHttpUrl(appUrl)) {\n      return this.formatUniversalUrl(appUrl, wcUri, name)\n    }\n    let safeAppUrl = appUrl\n    if (!safeAppUrl.includes('://')) {\n      safeAppUrl = appUrl.replaceAll('/', '').replaceAll(':', '')\n      safeAppUrl = `${safeAppUrl}://`\n    }\n    if (!safeAppUrl.endsWith('/')) {\n      safeAppUrl = `${safeAppUrl}/`\n    }\n    this.setWalletConnectDeepLink(safeAppUrl, name)\n    const encodedWcUrl = encodeURIComponent(wcUri)\n\n    return `${safeAppUrl}wc?uri=${encodedWcUrl}`\n  },\n\n  formatUniversalUrl(appUrl: string, wcUri: string, name: string): string {\n    if (!CoreUtil.isHttpUrl(appUrl)) {\n      return this.formatNativeUrl(appUrl, wcUri, name)\n    }\n    let safeAppUrl = appUrl\n    if (!safeAppUrl.endsWith('/')) {\n      safeAppUrl = `${safeAppUrl}/`\n    }\n    this.setWalletConnectDeepLink(safeAppUrl, name)\n    const encodedWcUrl = encodeURIComponent(wcUri)\n\n    return `${safeAppUrl}wc?uri=${encodedWcUrl}`\n  },\n\n  async wait(miliseconds: number) {\n    return new Promise(resolve => {\n      setTimeout(resolve, miliseconds)\n    })\n  },\n\n  openHref(href: string, target: '_blank' | '_self') {\n    window.open(href, target, 'noreferrer noopener')\n  },\n\n  setWalletConnectDeepLink(href: string, name: string) {\n    try {\n      localStorage.setItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href, name }))\n    } catch {\n      console.info('Unable to set WalletConnect deep link')\n    }\n  },\n\n  setWalletConnectAndroidDeepLink(wcUri: string) {\n    try {\n      const [href] = wcUri.split('?')\n      localStorage.setItem(\n        CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE,\n        JSON.stringify({ href, name: 'Android' })\n      )\n    } catch {\n      console.info('Unable to set WalletConnect android deep link')\n    }\n  },\n\n  removeWalletConnectDeepLink() {\n    try {\n      localStorage.removeItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE)\n    } catch {\n      console.info('Unable to remove WalletConnect deep link')\n    }\n  },\n\n  setModalVersionInStorage() {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(CoreUtil.WCM_VERSION, process.env.ROLLUP_WCM_VERSION ?? 'UNKNOWN')\n      }\n    } catch {\n      console.info('Unable to set Web3Modal version in storage')\n    }\n  },\n\n  getWalletRouterData() {\n    const routerData = RouterCtrl.state.data?.Wallet\n    if (!routerData) {\n      throw new Error('Missing \"Wallet\" view data')\n    }\n\n    return routerData\n  }\n}\n","import { proxy, snapshot, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { EventsCtrlState, ModalEvent, ModalEventData } from '../types/controllerTypes'\n\n// -- helpers ------------------------------------------------------ //\nconst isEnabled =\n  typeof location !== 'undefined' &&\n  (location.hostname.includes('localhost') || location.protocol.includes('https'))\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<EventsCtrlState>({\n  enabled: isEnabled,\n  userSessionId: '',\n  events: [],\n  connectedWalletId: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const EventsCtrl = {\n  state,\n\n  subscribe(callback: (newEvent: ModalEvent) => void) {\n    return valtioSub(state.events, () => callback(snapshot(state.events[state.events.length - 1])))\n  },\n\n  initialize() {\n    if (state.enabled && typeof crypto?.randomUUID !== 'undefined') {\n      state.userSessionId = crypto.randomUUID()\n    }\n  },\n\n  setConnectedWalletId(connectedWalletId: EventsCtrlState['connectedWalletId']) {\n    state.connectedWalletId = connectedWalletId\n  },\n\n  click(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'CLICK' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  },\n\n  track(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'TRACK' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  },\n\n  view(data: ModalEventData) {\n    if (state.enabled) {\n      const event = {\n        type: 'VIEW' as const,\n        name: data.name,\n        userSessionId: state.userSessionId,\n        timestamp: Date.now(),\n        data\n      }\n      state.events.push(event)\n    }\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { OptionsCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<OptionsCtrlState>({\n  chains: undefined,\n  walletConnectUri: undefined,\n  isAuth: false,\n  isCustomDesktop: false,\n  isCustomMobile: false,\n  isDataLoaded: false,\n  isUiLoaded: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const OptionsCtrl = {\n  state,\n\n  subscribe(callback: (newState: OptionsCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setChains(chains: OptionsCtrlState['chains']) {\n    state.chains = chains\n  },\n\n  setWalletConnectUri(walletConnectUri: OptionsCtrlState['walletConnectUri']) {\n    state.walletConnectUri = walletConnectUri\n  },\n\n  setIsCustomDesktop(isCustomDesktop: OptionsCtrlState['isCustomDesktop']) {\n    state.isCustomDesktop = isCustomDesktop\n  },\n\n  setIsCustomMobile(isCustomMobile: OptionsCtrlState['isCustomMobile']) {\n    state.isCustomMobile = isCustomMobile\n  },\n\n  setIsDataLoaded(isDataLoaded: OptionsCtrlState['isDataLoaded']) {\n    state.isDataLoaded = isDataLoaded\n  },\n\n  setIsUiLoaded(isUiLoaded: OptionsCtrlState['isUiLoaded']) {\n    state.isUiLoaded = isUiLoaded\n  },\n\n  setIsAuth(isAuth: OptionsCtrlState['isAuth']) {\n    state.isAuth = isAuth\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ConfigCtrlState } from '../types/controllerTypes'\nimport { CoreUtil } from '../utils/CoreUtil'\nimport { EventsCtrl } from './EventsCtrl'\nimport { OptionsCtrl } from './OptionsCtrl'\n\nconst state = proxy<ConfigCtrlState>({\n  projectId: '',\n  mobileWallets: undefined,\n  desktopWallets: undefined,\n  walletImages: undefined,\n  chains: undefined,\n  enableAuthMode: false,\n  enableExplorer: true,\n  explorerExcludedWalletIds: undefined,\n  explorerRecommendedWalletIds: undefined,\n  termsOfServiceUrl: undefined,\n  privacyPolicyUrl: undefined\n})\n\n// -- controller --------------------------------------------------- //\nexport const ConfigCtrl = {\n  state,\n\n  subscribe(callback: (newState: ConfigCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setConfig(config: ConfigCtrlState) {\n    EventsCtrl.initialize()\n    OptionsCtrl.setChains(config.chains)\n    OptionsCtrl.setIsAuth(Boolean(config.enableAuthMode))\n    OptionsCtrl.setIsCustomMobile(Boolean(config.mobileWallets?.length))\n    OptionsCtrl.setIsCustomDesktop(Boolean(config.desktopWallets?.length))\n\n    CoreUtil.setModalVersionInStorage()\n\n    Object.assign(state, config)\n  }\n}\n","import { ConfigCtrl } from '../controllers/ConfigCtrl'\nimport type { ListingParams, ListingResponse } from '../types/controllerTypes'\n\n// -- Helpers -------------------------------------------------------\nconst W3M_API = 'https://explorer-api.walletconnect.com'\nconst SDK_TYPE = 'wcm'\nconst SDK_VERSION = `js-${process.env.ROLLUP_WCM_VERSION}`\n\nasync function fetchListings(endpoint: string, params: ListingParams) {\n  const allParams = { sdkType: SDK_TYPE, sdkVersion: SDK_VERSION, ...params }\n  const url = new URL(endpoint, W3M_API)\n  url.searchParams.append('projectId', ConfigCtrl.state.projectId)\n  Object.entries(allParams).forEach(([key, value]) => {\n    if (value) {\n      url.searchParams.append(key, String(value))\n    }\n  })\n  const request = await fetch(url)\n\n  return request.json() as Promise<ListingResponse>\n}\n\n// -- Utility -------------------------------------------------------\nexport const ExplorerUtil = {\n  async getDesktopListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getDesktopListings', params)\n  },\n\n  async getMobileListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getMobileListings', params)\n  },\n\n  async getInjectedListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getInjectedListings', params)\n  },\n\n  async getAllListings(params: ListingParams) {\n    return fetchListings('/w3m/v1/getAllListings', params)\n  },\n\n  getWalletImageUrl(imageId: string) {\n    return `${W3M_API}/w3m/v1/getWalletImage/${imageId}?projectId=${ConfigCtrl.state.projectId}&sdkType=${SDK_TYPE}&sdkVersion=${SDK_VERSION}`\n  },\n\n  getAssetImageUrl(imageId: string) {\n    return `${W3M_API}/w3m/v1/getAssetImage/${imageId}?projectId=${ConfigCtrl.state.projectId}&sdkType=${SDK_TYPE}&sdkVersion=${SDK_VERSION}`\n  }\n}\n","import { proxy } from 'valtio/vanilla'\nimport type { ExplorerCtrlState, ListingParams } from '../types/controllerTypes'\nimport { CoreUtil } from '../utils/CoreUtil'\nimport { ExplorerUtil } from '../utils/ExplorerUtil'\nimport { ConfigCtrl } from './ConfigCtrl'\nimport { OptionsCtrl } from './OptionsCtrl'\n\nconst isMobile = CoreUtil.isMobile()\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ExplorerCtrlState>({\n  wallets: { listings: [], total: 0, page: 1 },\n  search: { listings: [], total: 0, page: 1 },\n  recomendedWallets: []\n})\n\n// -- controller --------------------------------------------------- //\nexport const ExplorerCtrl = {\n  state,\n\n  async getRecomendedWallets() {\n    const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state\n\n    // Don't fetch recomended wallets\n    if (\n      explorerRecommendedWalletIds === 'NONE' ||\n      (explorerExcludedWalletIds === 'ALL' && !explorerRecommendedWalletIds)\n    ) {\n      return state.recomendedWallets\n    }\n\n    // Fetch only recomended wallets defined in config\n    if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n      const recommendedIds = explorerRecommendedWalletIds.join(',')\n      const params = { recommendedIds }\n      const { listings } = await ExplorerUtil.getAllListings(params)\n      const listingsArr = Object.values(listings)\n      listingsArr.sort((a, b) => {\n        const aIndex = explorerRecommendedWalletIds.indexOf(a.id)\n        const bIndex = explorerRecommendedWalletIds.indexOf(b.id)\n\n        return aIndex - bIndex\n      })\n      state.recomendedWallets = listingsArr\n    }\n\n    // Fetch default recomended wallets based on user's device, options and excluded config\n    else {\n      const { chains, isAuth } = OptionsCtrl.state\n      const chainsFilter = chains?.join(',')\n      const isExcluded = CoreUtil.isArray(explorerExcludedWalletIds)\n      const params = {\n        page: 1,\n        sdks: isAuth ? 'auth_v1' : undefined,\n        entries: CoreUtil.RECOMMENDED_WALLET_AMOUNT,\n        chains: chainsFilter,\n        version: 2,\n        excludedIds: isExcluded ? explorerExcludedWalletIds.join(',') : undefined\n      }\n      const { listings } = isMobile\n        ? await ExplorerUtil.getMobileListings(params)\n        : await ExplorerUtil.getDesktopListings(params)\n      state.recomendedWallets = Object.values(listings)\n    }\n\n    return state.recomendedWallets\n  },\n\n  async getWallets(params: ListingParams) {\n    const extendedParams: ListingParams = { ...params }\n    const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state\n    const { recomendedWallets } = state\n\n    // Don't fetch any wallets if all are excluded\n    if (explorerExcludedWalletIds === 'ALL') {\n      return state.wallets\n    }\n\n    // Don't fetch recomended wallets, as we already have these\n    if (recomendedWallets.length) {\n      extendedParams.excludedIds = recomendedWallets.map(wallet => wallet.id).join(',')\n    } else if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n      extendedParams.excludedIds = explorerRecommendedWalletIds.join(',')\n    }\n\n    // Don't fetch user defined excluded wallets & recomended wallets\n    if (CoreUtil.isArray(explorerExcludedWalletIds)) {\n      extendedParams.excludedIds = [extendedParams.excludedIds, explorerExcludedWalletIds]\n        .filter(Boolean)\n        .join(',')\n    }\n\n    // Fetch only auth wallets\n    if (OptionsCtrl.state.isAuth) {\n      extendedParams.sdks = 'auth_v1'\n    }\n\n    const { page, search } = params\n    const { listings: listingsObj, total } = isMobile\n      ? await ExplorerUtil.getMobileListings(extendedParams)\n      : await ExplorerUtil.getDesktopListings(extendedParams)\n    const listings = Object.values(listingsObj)\n    const type = search ? 'search' : 'wallets'\n    state[type] = {\n      listings: [...state[type].listings, ...listings],\n      total,\n      page: page ?? 1\n    }\n\n    return { listings, total }\n  },\n\n  getWalletImageUrl(imageId: string) {\n    return ExplorerUtil.getWalletImageUrl(imageId)\n  },\n\n  getAssetImageUrl(imageId: string) {\n    return ExplorerUtil.getAssetImageUrl(imageId)\n  },\n\n  resetSearch() {\n    state.search = { listings: [], total: 0, page: 1 }\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ModalCtrlState } from '../types/controllerTypes'\nimport { CoreUtil } from '../utils/CoreUtil'\nimport { OptionsCtrl } from './OptionsCtrl'\nimport { RouterCtrl } from './RouterCtrl'\n\n// -- types -------------------------------------------------------- //\nexport interface OpenOptions {\n  uri: string\n  chains?: string[]\n}\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ModalCtrlState>({\n  open: false\n})\n\n// -- controller --------------------------------------------------- //\nexport const ModalCtrl = {\n  state,\n\n  subscribe(callback: (newState: ModalCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  async open(options?: OpenOptions) {\n    return new Promise<void>(resolve => {\n      const { isUiLoaded, isDataLoaded } = OptionsCtrl.state\n      CoreUtil.removeWalletConnectDeepLink()\n\n      OptionsCtrl.setWalletConnectUri(options?.uri)\n      OptionsCtrl.setChains(options?.chains)\n      RouterCtrl.reset('ConnectWallet')\n\n      // Open modal if essential async data is ready\n      if (isUiLoaded && isDataLoaded) {\n        state.open = true\n        resolve()\n      }\n      // Otherwise (slow network) re-attempt open checks\n      else {\n        const interval = setInterval(() => {\n          const opts = OptionsCtrl.state\n          if (opts.isUiLoaded && opts.isDataLoaded) {\n            clearInterval(interval)\n            state.open = true\n            resolve()\n          }\n        }, 200)\n      }\n    })\n  },\n\n  close() {\n    state.open = false\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ThemeCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nfunction isDarkMode() {\n  return typeof matchMedia !== 'undefined' && matchMedia('(prefers-color-scheme: dark)').matches\n}\n\nconst state = proxy<ThemeCtrlState>({\n  themeMode: isDarkMode() ? 'dark' : 'light'\n})\n\n// -- controller --------------------------------------------------- //\nexport const ThemeCtrl = {\n  state,\n\n  subscribe(callback: (newState: ThemeCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  setThemeConfig(theme: ThemeCtrlState) {\n    const { themeMode, themeVariables } = theme\n\n    if (themeMode) {\n      state.themeMode = themeMode\n    }\n\n    if (themeVariables) {\n      state.themeVariables = { ...themeVariables }\n    }\n  }\n}\n","import { proxy, subscribe as valtioSub } from 'valtio/vanilla'\nimport type { ToastCtrlState } from '../types/controllerTypes'\n\n// -- initial state ------------------------------------------------ //\nconst state = proxy<ToastCtrlState>({\n  open: false,\n  message: '',\n  variant: 'success'\n})\n\n// -- controller --------------------------------------------------- //\nexport const ToastCtrl = {\n  state,\n\n  subscribe(callback: (newState: ToastCtrlState) => void) {\n    return valtioSub(state, () => callback(state))\n  },\n\n  openToast(message: ToastCtrlState['message'], variant: ToastCtrlState['variant']) {\n    state.open = true\n    state.message = message\n    state.variant = variant\n  },\n\n  closeToast() {\n    state.open = false\n  }\n}\n"],"names":["d","constructor","e","openModal","t","open","closeModal","close","subscribeModal","subscribe","setTheme","o","setThemeConfig","i","setConfig","this","initUi","window","document","createElement","body","insertAdjacentElement","n","setIsUiLoaded","u","history","view","data","T","state","h","push","reset","replace","length","goBack","pop","slice","setData","a","WALLETCONNECT_DEEPLINK_CHOICE","WCM_VERSION","RECOMMENDED_WALLET_AMOUNT","isMobile","Boolean","matchMedia","matches","test","navigator","userAgent","isAndroid","toLowerCase","includes","isIos","isHttpUrl","startsWith","isArray","Array","formatNativeUrl","s","formatUniversalUrl","replaceAll","endsWith","setWalletConnectDeepLink","encodeURIComponent","async","Promise","setTimeout","openHref","localStorage","setItem","JSON","stringify","href","name","console","info","setWalletConnectAndroidDeepLink","split","removeWalletConnectDeepLink","removeItem","setModalVersionInStorage","getWalletRouterData","Wallet","Error","_","location","hostname","protocol","r","enabled","userSessionId","events","connectedWalletId","R","P","initialize","crypto","randomUUID","setConnectedWalletId","click","type","timestamp","Date","now","track","c","chains","walletConnectUri","isAuth","isCustomDesktop","isCustomMobile","isDataLoaded","isUiLoaded","p","setChains","setWalletConnectUri","setIsCustomDesktop","setIsCustomMobile","setIsDataLoaded","setIsAuth","W","projectId","mobileWallets","desktopWallets","walletImages","enableAuthMode","enableExplorer","explorerExcludedWalletIds","explorerRecommendedWalletIds","termsOfServiceUrl","privacyPolicyUrl","y","Object","assign","V","defineProperty","D","getOwnPropertySymbols","H","prototype","hasOwnProperty","B","propertyIsEnumerable","M","m","enumerable","configurable","writable","value","L","E","O","w","l","call","K","sdkType","sdkVersion","URL","searchParams","append","entries","forEach","String","fetch","json","getWalletImageUrl","getAssetImageUrl","z","j","J","q","k","x","N","wallets","listings","total","page","search","recomendedWallets","te","getRecomendedWallets","recommendedIds","join","getAllListings","values","sort","v","indexOf","id","sdks","version","excludedIds","b","getMobileListings","getDesktopListings","getWallets","f","F","map","filter","A","U","resetSearch","I","se","uri","setInterval","clearInterval","G","$","Q","X","S","C","themeMode","ne","themeVariables","Y","g","message","variant","oe","openToast","closeToast"],"sourceRoot":""}