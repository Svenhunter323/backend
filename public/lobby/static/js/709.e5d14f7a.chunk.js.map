{"version":3,"file":"static/js/709.e5d14f7a.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/hmac.ts","../node_modules/viem/node_modules/@noble/curves/src/utils.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/viem/node_modules/@noble/curves/src/secp256k1.ts","../node_modules/viem/node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  abytes as abytes_,\n  bytesToHex as bytesToHex_,\n  concatBytes as concatBytes_,\n  hexToBytes as hexToBytes_,\n  isBytes as isBytes_,\n} from '@noble/hashes/utils.js';\nexport {\n  abytes,\n  anumber,\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  hexToBytes,\n  isBytes,\n  randomBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes_(bytes);\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes_(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes_(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes_(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\n\n// DRBG\n\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes_(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\nexport function isHash(val: CHash): boolean {\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(\n  object: Record<string, any>,\n  fields: Record<string, string>,\n  optFields: Record<string, string> = {}\n): void {\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n  type Item = keyof typeof object;\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\n    const val = object[fieldName];\n    if (isOpt && val === undefined) return;\n    const current = typeof val;\n    if (current !== expectedType || val === null)\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  anumber,\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n} from '../utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5);\nconst _8n = /* @__PURE__ */ BigInt(8);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  // Caching initialization could boost perf by 7%.\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  isValidNot0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'number',\n    BITS: 'number',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  _validateObject(field, opts);\n  // const max = 16384;\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n  return field;\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\nexport type NLength = { nByteLength: number; nBitLength: number };\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number): NLength {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\ntype SqrtFn = (n: bigint) => bigint;\ntype FieldOpts = Partial<{ sqrt: SqrtFn; isLE: boolean; BITS: number }>;\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLenOrOpts?: number | FieldOpts,\n  isLE = false,\n  opts: { sqrt?: SqrtFn } = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  let _nbitLength: number | undefined = undefined;\n  let _sqrt: SqrtFn | undefined = undefined;\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS) _nbitLength = _opts.BITS;\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n  } else {\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n    if (opts.sqrt) _sqrt = opts.sqrt;\n  }\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    // is valid and invertible\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      _sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from '../utils.ts';\nimport { Field, FpInvertBatch, type IField, nLength, validateField } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n  toAffine?(invertedZ?: any): AffinePoint<any>;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\n  Fp: IField<any>;\n  Fn: IField<bigint>;\n  fromAffine(ap: AffinePoint<any>): T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nexport function negateCt<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ<T>(\n  c: ExtendedGroupConstructor<T>,\n  property: 'pz' | 'ez',\n  points: T[]\n): T[] {\n  const getz = property === 'pz' ? (p: any) => p.pz : (p: any) => p.ez;\n  const toInv = FpInvertBatch(c.Fp, points.map(getz));\n  // @ts-ignore\n  const affined = points.map((p, i) => p.toAffine(toInv[i]));\n  return affined.map(c.fromAffine);\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nfunction assert0(n: bigint): void {\n  if (n !== _0n) throw new Error('invalid wNAF');\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  getPrecomputes(W: number, P: T, transform?: Mapper<T>): T[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  wNAFCached(P: T, n: bigint, transform?: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform?: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate: negateCt,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // Smaller version:\n      // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n      // TODO: check the scalar is less than group order?\n      // wNAF behavior is undefined otherwise. But have to carefully remove\n      // other checks before wNAF. ORDER == bits here.\n      // Accumulators\n      let p = c.ZERO;\n      let f = c.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(negateCt(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(negateCt(isNeg, precomputes[offset]));\n        }\n      }\n      assert0(n);\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      assert0(n);\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform?: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          // Doing transform outside of if brings 15% perf hit\n          if (typeof transform === 'function') comp = transform(comp);\n          pointPrecomputes.set(P, comp);\n        }\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform?: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform?: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  point: T,\n  k1: bigint,\n  k2: bigint\n): { p1: T; p2: T } {\n  let acc = point;\n  let p1 = c.ZERO;\n  let p2 = c.ZERO;\n  while (k1 > _0n || k2 > _0n) {\n    if (k1 & _1n) p1 = p1.add(acc);\n    if (k2 & _1n) p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n;\n    k2 >>= _1n;\n  }\n  return { p1, p2 };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\n// TODO: remove\n/** @deprecated */\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n\nexport type ValidCurveParams<T> = {\n  a: T;\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  Gx: T;\n  Gy: T;\n} & ({ b: T } | { d: T });\n\nfunction createField<T>(order: bigint, field?: IField<T>): IField<T> {\n  if (field) {\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n    validateField(field);\n    return field;\n  } else {\n    return Field(order) as unknown as IField<T>;\n  }\n}\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields<T>(\n  type: 'weierstrass' | 'edwards',\n  CURVE: ValidCurveParams<T>,\n  curveOpts: Partial<FpFn<T>> = {}\n): FpFn<T> {\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of ['p', 'n', 'h'] as const) {\n    const val = CURVE[p];\n    if (!(typeof val === 'bigint' && val > _0n))\n      throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp);\n  const Fn = createField(CURVE.n, curveOpts.Fn);\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\n  const params = ['Gx', 'Gy', 'a', _b] as const;\n  for (const p of params) {\n    // @ts-ignore\n    if (!Fp.isValid(CURVE[p]))\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  return { Fp, Fn };\n}\n","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  createHmacDrbg,\n  ensureBytes,\n  hexToBytes,\n  inRange,\n  isBytes,\n  memoized,\n  numberToHexUnpadded,\n  randomBytes,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  mulEndoUnsafe,\n  negateCt,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n} from './curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength,\n  mapHashToField,\n  validateField,\n  type IField,\n  type NLength,\n} from './modular.ts';\n\nexport type { AffinePoint };\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\nexport type Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = {\n  lowS?: boolean;\n  prehash?: boolean;\n  format?: 'compact' | 'der' | 'js' | undefined;\n};\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n/** Instance methods for 3D XYZ points. */\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  /** projective x coordinate. Note: different from .x */\n  readonly px: T;\n  /** projective y coordinate. Note: different from .y */\n  readonly py: T;\n  /** projective z coordinate */\n  readonly pz: T;\n  /** affine x coordinate */\n  get x(): T;\n  /** affine y coordinate */\n  get y(): T;\n  assertValidity(): void;\n  clearCofactor(): ProjPointType<T>;\n  is0(): boolean;\n  isTorsionFree(): boolean;\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  /**\n   * Massively speeds up `p.multiply(n)` by using wnaf precompute tables (caching).\n   * Table generation takes 30MB of ram and 10ms on high-end CPU, but may take\n   * much longer on slow devices.\n   * Actual generation will happen on first call of `.multiply()`.\n   * By default, BASE point is precomputed.\n   * @param windowSize - table window size\n   * @param isLazy - (default true) allows to defer generation\n   */\n  precompute(windowSize?: number, isLazy?: boolean): ProjPointType<T>;\n\n  /** Converts 3D XYZ projective point to 2D xy affine coordinates */\n  toAffine(invertedZ?: T): AffinePoint<T>;\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\n  toBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  /** @deprecated use `multiplyUnsafe` */\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  /** @deprecated use `p.y % 2n === 0n` */\n  hasEvenY(): boolean;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n\n/** Static methods for 3D XYZ points. */\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromBytes(encodedPoint: Uint8Array): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\n// LegacyWeierstrassOpts\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\n\n// LegacyWeierstrass\nexport type CurvePointsRes<T> = {\n  /** @deprecated import individual CURVE params */\n  CURVE: CurvePointsType<T>;\n  Point: ProjConstructor<T>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: ProjConstructor<T>;\n  /** @deprecated */\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  /** @deprecated */\n  weierstrassEquation: (x: T) => T;\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// Aliases to legacy types\n// export type CurveType = LegacyECDSAOpts;\n// export type CurveFn = LegacyECDSA;\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\n\n/**\n * Weierstrass curve options.\n *\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\n * * a: formula param, must be in field of p\n * * b: formula param, must be in field of p\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type WeierstrassOpts<T> = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b: T;\n  Gx: T;\n  Gy: T;\n}>;\n\n// When a cofactor != 1, there can be an effective methods to:\n// 1. Determine whether a point is torsion-free\n// 2. Clear torsion component\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\nexport type WeierstrassExtraOpts<T> = Partial<{\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  // TODO: remove\n  allowedPrivateKeyLengths: readonly number[]; // for P521\n  allowInfinityPoint: boolean;\n  endo: EndomorphismOpts;\n  wrapPrivateKey: boolean;\n  isTorsionFree: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  clearCofactor: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n}>;\n\n/**\n * Options for ECDSA signatures over a Weierstrass curve.\n */\nexport type ECDSAOpts = {\n  hash: CHash;\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\n/** ECDSA is only supported for prime fields, not Fp2 (extension fields). */\nexport interface ECDSA {\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  Point: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    // TODO: deprecate those two\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    /** @deprecated */\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n}\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n// TODO: remove\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nexport function _legacyHelperNormPriv(\n  Fn: IField<bigint>,\n  allowedPrivateKeyLengths?: readonly number[],\n  wrapPrivateKey?: boolean\n): (key: PrivKey) => bigint {\n  const { BYTES: expected } = Fn;\n  // Validates if priv key is valid and converts it to bigint.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    let num: bigint;\n    if (typeof key === 'bigint') {\n      num = key;\n    } else {\n      let bytes = ensureBytes('private key', key);\n      if (allowedPrivateKeyLengths) {\n        if (!allowedPrivateKeyLengths.includes(bytes.length * 2))\n          throw new Error('invalid private key');\n        const padded = new Uint8Array(expected);\n        padded.set(bytes, padded.length - bytes.length);\n        bytes = padded;\n      }\n      try {\n        num = Fn.fromBytes(bytes);\n      } catch (error) {\n        throw new Error(\n          `invalid private key: expected ui8a of size ${expected}, got ${typeof key}`\n        );\n      }\n    }\n    if (wrapPrivateKey) num = Fn.create(num); // disabled by default, enabled for BLS\n    if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n    return num;\n  }\n  return normPrivateKeyToScalar;\n}\n\nexport function weierstrassN<T>(\n  CURVE: WeierstrassOpts<T>,\n  curveOpts: WeierstrassExtraOpts<T> = {}\n): ProjConstructor<T> {\n  const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(\n    curveOpts,\n    {},\n    {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n\n  const { endo } = curveOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (\n      !Fp.is0(CURVE.a) ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n    }\n  }\n\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(\n    _c: ProjConstructor<T>,\n    point: ProjPointType<T>,\n    isCompressed: boolean\n  ): Uint8Array {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool('isCompressed', isCompressed);\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd!(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes: Uint8Array) {\n    abytes(bytes);\n    const L = Fp.BYTES;\n    const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n    const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === LC && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y: T;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return { x, y };\n    } else if (length === LU && head === 0x04) {\n      // TODO: more checks\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return { x, y };\n    } else {\n      throw new Error(\n        `bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`\n      );\n    }\n  }\n\n  const toBytes = curveOpts.toBytes || pointToBytes;\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title: string, n: T, banZero = false) {\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  function finishEndo(\n    endoBeta: EndomorphismOpts['beta'],\n    k1p: Point,\n    k2p: Point,\n    k1neg: boolean,\n    k2neg: boolean\n  ) {\n    k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly px: T;\n    readonly py: T;\n    readonly pz: T;\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(px: T, py: T, pz: T) {\n      this.px = acoord('x', px);\n      this.py = acoord('y', py, true);\n      this.pz = acoord('z', pz);\n      Object.freeze(this);\n    }\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, 'pz', points);\n    }\n\n    static fromBytes(bytes: Uint8Array): Point {\n      abytes(bytes);\n      return Point.fromHex(bytes);\n    }\n\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(privateKey: PrivKey) {\n      const normPrivateKeyToScalar = _legacyHelperNormPriv(\n        Fn,\n        curveOpts.allowedPrivateKeyLengths,\n        curveOpts.wrapPrivateKey\n      );\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    /** Multiscalar Multiplication */\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize: number = 8, isLazy = true): Point {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n\n    /** \"Private method\", don't use it directly */\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n\n    /** Compare one point to another. */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo } = curveOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const mul = (n: bigint) => wnaf.wNAFCached(this, n, Point.normalizeZ);\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo } = curveOpts;\n      const p = this;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasPrecomputes(this)) return this.multiply(sc);\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n        // `wNAFCachedUnsafe` is 30% slower\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.wNAFCachedUnsafe(p, sc);\n      }\n    }\n\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ?: T): AffinePoint<T> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree(): boolean {\n      const { isTorsionFree } = curveOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n\n    clearCofactor(): Point {\n      const { clearCofactor } = curveOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    toBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    /** @deprecated use `toBytes` */\n    toRawBytes(isCompressed = true): Uint8Array {\n      return this.toBytes(isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const bits = Fn.BITS;\n  const wnaf = wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n  return Point;\n}\n\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  toDERRawBytes(): Uint8Array;\n  toDERHex(): string;\n  // toBytes(format?: string): Uint8Array;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint, recovery?: number): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\nexport type SignatureLike = { r: bigint; s: bigint };\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY: boolean): Uint8Array {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n\nexport type CurveFn = {\n  CURVE: CurvePointsType<bigint>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  Point: ProjConstructor<bigint>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function ecdsa(\n  Point: ProjConstructor<bigint>,\n  ecdsaOpts: ECDSAOpts,\n  curveOpts: WeierstrassExtraOpts<bigint> = {}\n): ECDSA {\n  _validateObject(\n    ecdsaOpts,\n    { hash: 'function' },\n    {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function',\n    }\n  );\n\n  const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n  const hmac_: HmacFnSync =\n    ecdsaOpts.hmac ||\n    (((key, ...msgs) => hmac(ecdsaOpts.hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\n\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n  }\n  function aValidRS(title: string, num: bigint) {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n  }\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      aValidRS('r', r); // r in [1..N-1]\n      aValidRS('s', s); // s in [1..N-1]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const L = Fn.BYTES;\n      const b = ensureBytes('compactSignature', hex, L * 2);\n      return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    /**\n     * @todo remove\n     * @deprecated\n     */\n    assertValidity(): void {}\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    // ProjPointType<bigint>\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n\n    toBytes(format: 'compact' | 'der') {\n      if (format === 'compact') return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      throw new Error('invalid format');\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(\n    Fn,\n    curveOpts.allowedPrivateKeyLengths,\n    curveOpts.wrapPrivateKey\n  );\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const n = CURVE_ORDER;\n      return mapHashToField(randomBytes_(getMinHashLength(n)), n);\n    },\n\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const arr = ensureBytes('key', item);\n    const length = arr.length;\n    const L = Fp.BYTES;\n    const LC = L + 1; // e.g. 33 for 32\n    const LU = 2 * L + 1; // e.g. 65 for 32\n    if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n      return undefined;\n    } else {\n      return length === LC || length === LU;\n    }\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicB) === false) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    ecdsaOpts.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    ecdsaOpts.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash } = ecdsaOpts;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg<RecoveredSignature>(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE.precompute(8);\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n\n    // Verify opts\n    validateSigVerOpts(opts);\n    const { lowS, prehash, format } = opts;\n\n    // TODO: remove\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n\n    if (format !== undefined && !['compact', 'der', 'js'].includes(format))\n      throw new Error('format must be \"compact\", \"der\" or \"js\"');\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n\n    // deduce signature format\n    try {\n      // if (format === 'js') {\n      //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n      // } else if (format === 'compact') {\n      //   _sig = Signature.fromCompact(sg);\n      // } else if (format === 'der') {\n      //   _sig = Signature.fromDER(sg);\n      // } else {\n      //   throw new Error('invalid format');\n      // }\n      if (isObj) {\n        if (format === undefined || format === 'js') {\n          _sig = new Signature(sg.r, sg.s);\n        } else {\n          throw new Error('invalid format');\n        }\n      }\n      if (isHex) {\n        // TODO: remove this malleable check\n        // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n        // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    // todo: optional.hash => hash\n    if (prehash) msgHash = ecdsaOpts.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = Fn.inv(s); // s^-1\n    const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n    const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n    if (R.is0()) return false;\n    const v = Fn.create(R.x); // v = r.x mod n\n    return v === r;\n  }\n  // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n  // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n  return Object.freeze({\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    utils,\n    Point,\n    Signature,\n  });\n}\n\nexport type WsPointComposed<T> = {\n  CURVE: WeierstrassOpts<T>;\n  curveOpts: WeierstrassExtraOpts<T>;\n};\nexport type WsComposed = {\n  CURVE: WeierstrassOpts<bigint>;\n  curveOpts: WeierstrassExtraOpts<bigint>;\n  ecdsaOpts: ECDSAOpts;\n};\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\n  const CURVE: WeierstrassOpts<T> = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength);\n  const curveOpts: WeierstrassExtraOpts<T> = {\n    Fp,\n    Fn,\n    allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    wrapPrivateKey: c.wrapPrivateKey,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes,\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts: ECDSAOpts = {\n    hash: c.hash,\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN,\n  };\n  return { CURVE, curveOpts, ecdsaOpts };\n}\nfunction _weierstrass_new_output_to_legacy<T>(\n  c: CurvePointsType<T>,\n  Point: ProjConstructor<T>\n): CurvePointsRes<T> {\n  const { Fp, Fn } = Point;\n  // TODO: remove\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(\n    Fn,\n    c.allowedPrivateKeyLengths,\n    c.wrapPrivateKey\n  );\n  return Object.assign(\n    {},\n    {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar,\n      weierstrassEquation,\n      isWithinCurveOrder,\n    }\n  );\n}\nfunction _ecdsa_new_output_to_legacy(c: CurveType, ecdsa: ECDSA): CurveFn {\n  return Object.assign({}, ecdsa, {\n    ProjectivePoint: ecdsa.Point,\n    CURVE: c,\n  });\n}\n\n// _ecdsa_legacy\nexport function weierstrass(c: CurveType): CurveFn {\n  const { CURVE, curveOpts, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  const { A, B, Z } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CMethod,\n  isogenyMap,\n} from './abstract/hash-to-curve.ts';\nimport { Field, mod, pow2 } from './abstract/modular.ts';\nimport {\n  type EndomorphismOpts,\n  mapToCurveSimpleSWU,\n  type ProjPointType as PointType,\n  type WeierstrassOpts,\n} from './abstract/weierstrass.ts';\nimport type { Hex, PrivKey } from './utils.ts';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './utils.ts';\n\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1_CURVE.n;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    } satisfies EndomorphismOpts,\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1_CURVE.p);\nconst modN = (x: bigint) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y: bigint) => y % _2n === _0n;\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (!hasEven(y)) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n    const { x, y } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.Point,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\nimport type { CHash } from './utils.ts';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): { hash: CHash } {\n  return { hash };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, hash: hash });\n  return { ...create(defHash), create };\n}\n"],"names":["HMAC","Hash","constructor","hash","_key","super","finished","destroyed","ahash","key","toBytes","this","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","clean","buf","aexists","digestInto","out","abytes","destroy","_cloneInto","to","Object","getPrototypeOf","clone","hmac","message","_0n","BigInt","_1n","abool","title","value","numberToHexUnpadded","num","hex","toString","hexToNumber","bytesToNumberBE","bytes","bytesToHex_","bytesToNumberLE","abytes_","from","reverse","numberToBytesBE","n","len","hexToBytes_","padStart","numberToBytesLE","ensureBytes","expectedLength","res","e","isBytes_","isPosBig","aInRange","min","max","inRange","bitMask","_validateObject","object","fields","optFields","checkField","fieldName","expectedType","isOpt","val","undefined","current","entries","forEach","k","v","memoized","fn","map","WeakMap","arg","args","get","computed","_2n","_3n","_4n","_5n","_8n","mod","a","b","result","pow2","x","power","modulo","invert","number","y","u","q","r","m","sqrt3mod4","Fp","p1div4","ORDER","root","pow","eql","sqr","sqrt5mod8","p5div8","n2","mul","nv","sub","ONE","FpSqrt","P","Q","S","Z","_Fp","Field","FpLegendre","cc","Q1div2","is0","M","c","t","R","ZERO","t_tmp","exponent","tonelliShanks","FIELD_FIELDS","FpPow","p","d","FpInvertBatch","nums","passZero","inverted","Array","fill","multipliedAcc","reduce","acc","invertedAcc","inv","reduceRight","p1mod2","powered","yes","zero","no","neg","nLength","nBitLength","anumber","_nBitLength","nByteLength","Math","ceil","bitLenOrOpts","isLE","opts","_nbitLength","_sqrt","sqrt","_opts","BITS","BYTES","sqrtP","f","freeze","MASK","isValid","isValidNot0","isOdd","lhs","rhs","add","div","sqrN","addN","subN","mulN","fromBytes","invertBatch","lst","cmov","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","negateCt","condition","item","negate","validateW","W","bits","Number","isSafeInteger","calcWOpts","scalarBits","maxNumber","windows","windowSize","mask","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","offset","abs","isZero","isNeg","isNegF","offsetF","validateMSMPoints","points","isArray","validateMSMScalars","scalars","field","s","pointPrecomputes","pointWindowSizes","getW","assert0","pippenger","fieldN","plength","slength","bitLen","buckets","sum","floor","j","scalar","resI","sumI","double","createField","order","validateField","validateSigVerOpts","lowS","prehash","DERErr","DER","Err","_tlv","encode","tag","data","E","dataLen","lenLen","decode","pos","first","lengthBytes","subarray","l","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","seq","_legacyHelperEquat","x2","x3","_legacyHelperNormPriv","Fn","allowedPrivateKeyLengths","wrapPrivateKey","expected","includes","padded","error","weierstrassN","CURVE","curveOpts","type","params","_createCurveFields","h","cofactor","CURVE_ORDER","allowInfinityPoint","clearCofactor","isTorsionFree","endo","beta","splitScalar","assertCompressionIsSupported","_c","point","isCompressed","toAffine","bx","hasEvenY","concatBytes","pprefix","of","L","LC","LU","head","tail","isValidXY","y2","weierstrassEquation","sqrtError","err","left","right","Gx","Gy","_4a3","_27b2","acoord","banZero","aprjpoint","other","Point","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","finishEndo","endoBeta","k1p","k2p","k1neg","k2neg","fromAffine","normalizeZ","property","getz","ez","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","normPrivateKeyToScalar","BASE","multiply","msm","precompute","isLazy","wnaf","setWindowSize","_setWindowSize","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","subtract","fake","wNAFCached","k1","k2","k1f","k2f","multiplyUnsafe","sc","hasPrecomputes","p1","p2","mulEndoUnsafe","wNAFCachedUnsafe","multiplyAndAddUnsafe","invertedZ","toRawBytes","toHex","bytesToHex","constTimeNegate","elm","unsafeLadder","precomputeWindow","base","push","wNAF","precomputes","wo","wNAFUnsafe","getPrecomputes","transform","comp","prev","delete","ecdsa","ecdsaOpts","randomBytes","bits2int","bits2int_modN","randomBytes_","hmac_","msgs","fnBits","isBiggerThanHalfOrder","aValidRS","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","FIELD_ORDER","rec","radj","ir","u1","u2","hasHighS","normalizeS","format","hexToBytes","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","mapHashToField","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","seed","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","hashLen","qByteLen","hmacFn","u8n","u8of","byte","reset","reseed","gen","sl","slice","concatBytes_","genUntil","pred","createHmacDrbg","drbg","verify","signature","publicKey","sg","isHex","isBytes","isObj","_sig","derError","is","_weierstrass_legacy_opts_to_new","weierstrass","_ecdsa_legacy_opts_to_new","assign","ProjectivePoint","_ecdsa_new_output_to_legacy","secp256k1_CURVE","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","curveDef","defHash","createCurve","a1","b1","a2","POW_2_128","c1","c2","sha256"],"sourceRoot":""}